---
import { slugifyStr } from "@/utils/slugify";
import type { CollectionEntry } from "astro:content";
import { getPath } from "@/utils/getPath";
import Datetime from "./Datetime.astro";

export interface Props extends CollectionEntry<"blog"> {
  variant?: "h2" | "h3";
}

const { variant = "h2", data, id, filePath } = Astro.props;

const { title, description, pubDatetime, modDatetime, timezone } = data;

// Resolve a thumbnail image for the card: prefer cover -> ogImage
type ImageLike = { src?: string };
let thumbUrl: string | undefined;
const initOg = (data as { ogImage?: unknown }).ogImage;
const initCover = (data as { cover?: unknown }).cover;

if (initCover) {
  if (typeof initCover === "string") thumbUrl = initCover;
  else if (
    typeof initCover === "object" &&
    "src" in initCover &&
    typeof (initCover as ImageLike).src === "string"
  ) {
    thumbUrl = (initCover as ImageLike).src as string;
  }
} else if (initOg) {
  if (typeof initOg === "string") thumbUrl = initOg;
  else if (
    typeof initOg === "object" &&
    "src" in initOg &&
    typeof (initOg as ImageLike).src === "string"
  ) {
    thumbUrl = (initOg as ImageLike).src as string;
  }
}

const headerProps = {
  style: { viewTransitionName: slugifyStr(title) },
  class: "text-lg font-medium decoration-dashed hover:underline",
};
---

<li class="my-6">
  {
    thumbUrl && (
      <a
        href={`${import.meta.env.BASE_URL ?? "/"}${getPath(
          id,
          filePath,
          true,
          (data as { slug?: string })?.slug
        ).replace(/^\//, "")}`}
        class="mb-2 block overflow-hidden rounded-lg"
      >
        <img
          src={thumbUrl}
          alt={`${title} - thumbnail`}
          class="h-80 w-full object-cover"
          loading="lazy"
        />
      </a>
    )
  }
  <a
    href={`${import.meta.env.BASE_URL ?? "/"}${getPath(
      id,
      filePath,
      true,
      (data as { slug?: string })?.slug
    ).replace(/^\//, "")}`}
    class="inline-block text-lg font-medium text-accent decoration-dashed underline-offset-4 focus-visible:no-underline focus-visible:underline-offset-0"
  >
    {
      variant === "h2" ? (
        <h2 {...headerProps}>{title}</h2>
      ) : (
        <h3 {...headerProps}>{title}</h3>
      )
    }
  </a>
  <Datetime {pubDatetime} {modDatetime} {timezone} />
  <p>{description}</p>
</li>
