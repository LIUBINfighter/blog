---
import "@pagefind/default-ui/css/ui.css";
import Main from "@/layouts/Main.astro";
import Layout from "@/layouts/Layout.astro";
import Header from "@/components/Header.astro";
import Footer from "@/components/Footer.astro";
import { SITE } from "@/config";

const backUrl = SITE.showBackButton ? `${Astro.url.pathname}` : "/";
---

<Layout title={`Search | ${SITE.title}`}>
  <Header />
  <Main pageTitle="Search" pageDesc="Search any article ...">
    <div id="pagefind-search" transition:persist data-backurl={backUrl}></div>
  </Main>
  <Footer />
</Layout>

<script>
  function initSearch() {
    const pageFindSearch: HTMLElement | null =
      document.querySelector("#pagefind-search");

    if (!pageFindSearch) return;

    const params = new URLSearchParams(window.location.search);

    const onIdle = window.requestIdleCallback || (cb => setTimeout(cb, 1));

    onIdle(async () => {
      /* eslint-disable no-console */
      console.log('开始尝试导入 PagefindUI...');
      console.log('当前环境:', import.meta.env.DEV ? '开发模式' : '生产模式');
      
      let PagefindUI;
      try {
        // @ts-expect-error — Missing types for @pagefind/default-ui package.
        const module = await import("@pagefind/default-ui");
        PagefindUI = module.PagefindUI;
        console.log('PagefindUI 导入成功:', PagefindUI ? '定义了' : 'undefined');
        if (PagefindUI) {
          console.log('PagefindUI 构造函数类型:', typeof PagefindUI);
        }
      } catch (error: unknown) {
        console.error('PagefindUI 导入失败:', error);
        let errorMessage = '未知错误';
        
        if (error && typeof error === 'object' && 'message' in error) {
          errorMessage = (error as Error).message || errorMessage;
        }
        
        console.error('错误详情:', errorMessage);
        // 在导入失败时显示错误信息
        pageFindSearch.innerHTML = `
          <div class="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded">
            <strong>搜索初始化失败!</strong> ${errorMessage}
          </div>
        `;
        return; // 导入失败则停止初始化
      }
      /* eslint-enable no-console */

      if (!PagefindUI) {
        /* eslint-disable no-console */
        console.error('PagefindUI 未定义，无法初始化搜索界面');
        pageFindSearch.innerHTML = `
          <div class="bg-yellow-100 border border-yellow-400 text-yellow-700 px-4 py-3 rounded">
            <strong>警告:</strong> PagefindUI 未正确加载，请检查依赖和构建过程。
          </div>
        `;
        return;
        /* eslint-enable no-console */
      }

      // Display warning inn dev mode
      if (import.meta.env.DEV) {
        /* eslint-disable no-console */
        console.warn('开发模式警告: 需要运行 pnpm build 才能看到搜索结果');
        /* eslint-enable no-console */
        pageFindSearch.innerHTML = `
            <div class="bg-muted/75 rounded p-4 space-y-4 mb-4">
              <p><strong>DEV mode Warning! </strong>You need to build the project at least once to see the search results during development.</p>
              <code class="block bg-black text-white px-2 py-1 rounded">pnpm run build</code>
            </div>
          `;
      }

      /* eslint-disable no-console */
      console.log('开始初始化 PagefindUI 实例...');
      let search;
      try {
        // Init pagefind ui
        console.log('配置 PagefindUI 路径: /pagefind');
        search = new PagefindUI({
          indexPath: "/pagefind",
          element: "#pagefind-search",
          showSubResults: true,
          showImages: false,
          processTerm: function (term: string) {
            params.set("q", term); // Update the `q` parameter in the URL
            history.replaceState(history.state, "", "?" + params.toString()); // Push the new URL without reloading

            const backUrl = pageFindSearch?.dataset?.backurl;
            sessionStorage.setItem("backUrl", backUrl + "?" + params.toString());

            return term;
          },
        });
        console.log('PagefindUI 实例化成功:', search ? '成功' : '失败');
        console.log('PagefindUI 配置路径:', search ? '默认路径' : '配置失败');
      } catch (initError: unknown) {
        console.error('PagefindUI 初始化失败:', initError);
        let initErrorMessage = '未知初始化错误';
        if (initError && typeof initError === 'object' && 'message' in initError) {
          initErrorMessage = (initError as Error).message || initErrorMessage;
        }
        console.error('初始化错误详情:', initErrorMessage);
        pageFindSearch.innerHTML = `
          <div class="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded">
            <strong>搜索界面初始化失败!</strong> ${initErrorMessage}
          </div>
        `;
        return;
      }
      /* eslint-enable no-console */

      // If search param exists (eg: search?q=astro), trigger search
      const query = params.get("q");
      if (query) {
        search.triggerSearch(query);
      }

      // Reset search param if search input is cleared
      const searchInput = document.querySelector(".pagefind-ui__search-input");
      const clearButton = document.querySelector(".pagefind-ui__search-clear");
      searchInput?.addEventListener("input", resetSearchParam);
      clearButton?.addEventListener("click", resetSearchParam);

      function resetSearchParam(e: Event) {
        if ((e.target as HTMLInputElement)?.value.trim() === "") {
          history.replaceState(history.state, "", window.location.pathname);
        }
      }
    });
  }

  document.addEventListener("astro:after-swap", () => {
    const pagefindSearch = document.querySelector("#pagefind-search");

    // if pagefind search form already exists, don't initialize search component
    if (pagefindSearch && pagefindSearch.querySelector("form")) return;

    initSearch();
  });
  initSearch();
</script>

<style is:global>
  #pagefind-search {
    --pagefind-ui-font: var(--font-mono);
    --pagefind-ui-text: var(--foreground);
    --pagefind-ui-background: var(--background);
    --pagefind-ui-border: var(--border);
    --pagefind-ui-primary: var(--accent);
    --pagefind-ui-tag: var(--background);
    --pagefind-ui-border-radius: 0.375rem;
    --pagefind-ui-border-width: 1px;
    --pagefind-ui-image-border-radius: 8px;
    --pagefind-ui-image-box-ratio: 3 / 2;

    form::before {
      background-color: var(--foreground);
    }

    input {
      font-weight: 400;
      border: 1px solid var(--border);
    }

    input:focus-visible {
      outline: 1px solid var(--accent);
    }

    .pagefind-ui__result-title a {
      color: var(--accent);
      outline-offset: 1px;
      outline-color: var(--accent);
    }

    .pagefind-ui__result-title a:focus-visible,
    .pagefind-ui__search-clear:focus-visible {
      text-decoration-line: none;
      outline-width: 2px;
      outline-style: dashed;
    }

    .pagefind-ui__result:last-of-type {
      border-bottom: 0;
    }

    .pagefind-ui__result-nested .pagefind-ui__result-link:before {
      font-family: system-ui;
    }
  }
</style>
